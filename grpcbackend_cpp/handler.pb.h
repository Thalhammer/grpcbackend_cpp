// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: handler.proto

#ifndef PROTOBUF_handler_2eproto__INCLUDED
#define PROTOBUF_handler_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_handler_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsHeaderImpl();
void InitDefaultsHeader();
void InitDefaultsRequestImpl();
void InitDefaultsRequest();
void InitDefaultsResponseImpl();
void InitDefaultsResponse();
void InitDefaultsClientInfoImpl();
void InitDefaultsClientInfo();
void InitDefaultsHandleRequestImpl();
void InitDefaultsHandleRequest();
void InitDefaultsHandleResponseImpl();
void InitDefaultsHandleResponse();
void InitDefaultsWebSocketMessageImpl();
void InitDefaultsWebSocketMessage();
void InitDefaultsWebSocketRequestImpl();
void InitDefaultsWebSocketRequest();
void InitDefaultsWebSocketResponseImpl();
void InitDefaultsWebSocketResponse();
void InitDefaultsHandleWebSocketRequestImpl();
void InitDefaultsHandleWebSocketRequest();
void InitDefaultsHandleWebSocketResponseImpl();
void InitDefaultsHandleWebSocketResponse();
inline void InitDefaults() {
  InitDefaultsHeader();
  InitDefaultsRequest();
  InitDefaultsResponse();
  InitDefaultsClientInfo();
  InitDefaultsHandleRequest();
  InitDefaultsHandleResponse();
  InitDefaultsWebSocketMessage();
  InitDefaultsWebSocketRequest();
  InitDefaultsWebSocketResponse();
  InitDefaultsHandleWebSocketRequest();
  InitDefaultsHandleWebSocketResponse();
}
}  // namespace protobuf_handler_2eproto
namespace thalhammer {
namespace http {
class ClientInfo;
class ClientInfoDefaultTypeInternal;
extern ClientInfoDefaultTypeInternal _ClientInfo_default_instance_;
class HandleRequest;
class HandleRequestDefaultTypeInternal;
extern HandleRequestDefaultTypeInternal _HandleRequest_default_instance_;
class HandleResponse;
class HandleResponseDefaultTypeInternal;
extern HandleResponseDefaultTypeInternal _HandleResponse_default_instance_;
class HandleWebSocketRequest;
class HandleWebSocketRequestDefaultTypeInternal;
extern HandleWebSocketRequestDefaultTypeInternal _HandleWebSocketRequest_default_instance_;
class HandleWebSocketResponse;
class HandleWebSocketResponseDefaultTypeInternal;
extern HandleWebSocketResponseDefaultTypeInternal _HandleWebSocketResponse_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class WebSocketMessage;
class WebSocketMessageDefaultTypeInternal;
extern WebSocketMessageDefaultTypeInternal _WebSocketMessage_default_instance_;
class WebSocketRequest;
class WebSocketRequestDefaultTypeInternal;
extern WebSocketRequestDefaultTypeInternal _WebSocketRequest_default_instance_;
class WebSocketResponse;
class WebSocketResponseDefaultTypeInternal;
extern WebSocketResponseDefaultTypeInternal _WebSocketResponse_default_instance_;
}  // namespace http
}  // namespace thalhammer
namespace thalhammer {
namespace http {

enum WebSocketMessage_Type {
  WebSocketMessage_Type_TEXT = 0,
  WebSocketMessage_Type_BINARY = 1,
  WebSocketMessage_Type_CLOSE = 2,
  WebSocketMessage_Type_WebSocketMessage_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WebSocketMessage_Type_WebSocketMessage_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WebSocketMessage_Type_IsValid(int value);
const WebSocketMessage_Type WebSocketMessage_Type_Type_MIN = WebSocketMessage_Type_TEXT;
const WebSocketMessage_Type WebSocketMessage_Type_Type_MAX = WebSocketMessage_Type_CLOSE;
const int WebSocketMessage_Type_Type_ARRAYSIZE = WebSocketMessage_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* WebSocketMessage_Type_descriptor();
inline const ::std::string& WebSocketMessage_Type_Name(WebSocketMessage_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    WebSocketMessage_Type_descriptor(), value);
}
inline bool WebSocketMessage_Type_Parse(
    const ::std::string& name, WebSocketMessage_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WebSocketMessage_Type>(
    WebSocketMessage_Type_descriptor(), name, value);
}
// ===================================================================

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:thalhammer.http.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const PROTOBUF_FINAL { return New(NULL); }

  Header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:thalhammer.http.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct ::protobuf_handler_2eproto::TableStruct;
  friend void ::protobuf_handler_2eproto::InitDefaultsHeaderImpl();
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:thalhammer.http.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .thalhammer.http.Header headers = 4;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 4;
  const ::thalhammer::http::Header& headers(int index) const;
  ::thalhammer::http::Header* mutable_headers(int index);
  ::thalhammer::http::Header* add_headers();
  ::google::protobuf::RepeatedPtrField< ::thalhammer::http::Header >*
      mutable_headers();
  const ::google::protobuf::RepeatedPtrField< ::thalhammer::http::Header >&
      headers() const;

  // string method = 1;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // string resource = 2;
  void clear_resource();
  static const int kResourceFieldNumber = 2;
  const ::std::string& resource() const;
  void set_resource(const ::std::string& value);
  #if LANG_CXX11
  void set_resource(::std::string&& value);
  #endif
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  ::std::string* mutable_resource();
  ::std::string* release_resource();
  void set_allocated_resource(::std::string* resource);

  // string protocol = 3;
  void clear_protocol();
  static const int kProtocolFieldNumber = 3;
  const ::std::string& protocol() const;
  void set_protocol(const ::std::string& value);
  #if LANG_CXX11
  void set_protocol(::std::string&& value);
  #endif
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  ::std::string* mutable_protocol();
  ::std::string* release_protocol();
  void set_allocated_protocol(::std::string* protocol);

  // bytes content = 5;
  void clear_content();
  static const int kContentFieldNumber = 5;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:thalhammer.http.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::thalhammer::http::Header > headers_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr resource_;
  ::google::protobuf::internal::ArenaStringPtr protocol_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable int _cached_size_;
  friend struct ::protobuf_handler_2eproto::TableStruct;
  friend void ::protobuf_handler_2eproto::InitDefaultsRequestImpl();
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:thalhammer.http.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .thalhammer.http.Header headers = 3;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 3;
  const ::thalhammer::http::Header& headers(int index) const;
  ::thalhammer::http::Header* mutable_headers(int index);
  ::thalhammer::http::Header* add_headers();
  ::google::protobuf::RepeatedPtrField< ::thalhammer::http::Header >*
      mutable_headers();
  const ::google::protobuf::RepeatedPtrField< ::thalhammer::http::Header >&
      headers() const;

  // string status_message = 2;
  void clear_status_message();
  static const int kStatusMessageFieldNumber = 2;
  const ::std::string& status_message() const;
  void set_status_message(const ::std::string& value);
  #if LANG_CXX11
  void set_status_message(::std::string&& value);
  #endif
  void set_status_message(const char* value);
  void set_status_message(const char* value, size_t size);
  ::std::string* mutable_status_message();
  ::std::string* release_status_message();
  void set_allocated_status_message(::std::string* status_message);

  // bytes content = 5;
  void clear_content();
  static const int kContentFieldNumber = 5;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // int32 status_code = 1;
  void clear_status_code();
  static const int kStatusCodeFieldNumber = 1;
  ::google::protobuf::int32 status_code() const;
  void set_status_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:thalhammer.http.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::thalhammer::http::Header > headers_;
  ::google::protobuf::internal::ArenaStringPtr status_message_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::int32 status_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_handler_2eproto::TableStruct;
  friend void ::protobuf_handler_2eproto::InitDefaultsResponseImpl();
};
// -------------------------------------------------------------------

class ClientInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:thalhammer.http.ClientInfo) */ {
 public:
  ClientInfo();
  virtual ~ClientInfo();

  ClientInfo(const ClientInfo& from);

  inline ClientInfo& operator=(const ClientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientInfo(ClientInfo&& from) noexcept
    : ClientInfo() {
    *this = ::std::move(from);
  }

  inline ClientInfo& operator=(ClientInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientInfo* internal_default_instance() {
    return reinterpret_cast<const ClientInfo*>(
               &_ClientInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ClientInfo* other);
  friend void swap(ClientInfo& a, ClientInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientInfo& from);
  void MergeFrom(const ClientInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string remote_ip = 1;
  void clear_remote_ip();
  static const int kRemoteIpFieldNumber = 1;
  const ::std::string& remote_ip() const;
  void set_remote_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_ip(::std::string&& value);
  #endif
  void set_remote_ip(const char* value);
  void set_remote_ip(const char* value, size_t size);
  ::std::string* mutable_remote_ip();
  ::std::string* release_remote_ip();
  void set_allocated_remote_ip(::std::string* remote_ip);

  // string local_ip = 3;
  void clear_local_ip();
  static const int kLocalIpFieldNumber = 3;
  const ::std::string& local_ip() const;
  void set_local_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_local_ip(::std::string&& value);
  #endif
  void set_local_ip(const char* value);
  void set_local_ip(const char* value, size_t size);
  ::std::string* mutable_local_ip();
  ::std::string* release_local_ip();
  void set_allocated_local_ip(::std::string* local_ip);

  // int32 remote_port = 2;
  void clear_remote_port();
  static const int kRemotePortFieldNumber = 2;
  ::google::protobuf::int32 remote_port() const;
  void set_remote_port(::google::protobuf::int32 value);

  // int32 local_port = 4;
  void clear_local_port();
  static const int kLocalPortFieldNumber = 4;
  ::google::protobuf::int32 local_port() const;
  void set_local_port(::google::protobuf::int32 value);

  // bool encrypted = 5;
  void clear_encrypted();
  static const int kEncryptedFieldNumber = 5;
  bool encrypted() const;
  void set_encrypted(bool value);

  // @@protoc_insertion_point(class_scope:thalhammer.http.ClientInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr remote_ip_;
  ::google::protobuf::internal::ArenaStringPtr local_ip_;
  ::google::protobuf::int32 remote_port_;
  ::google::protobuf::int32 local_port_;
  bool encrypted_;
  mutable int _cached_size_;
  friend struct ::protobuf_handler_2eproto::TableStruct;
  friend void ::protobuf_handler_2eproto::InitDefaultsClientInfoImpl();
};
// -------------------------------------------------------------------

class HandleRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:thalhammer.http.HandleRequest) */ {
 public:
  HandleRequest();
  virtual ~HandleRequest();

  HandleRequest(const HandleRequest& from);

  inline HandleRequest& operator=(const HandleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HandleRequest(HandleRequest&& from) noexcept
    : HandleRequest() {
    *this = ::std::move(from);
  }

  inline HandleRequest& operator=(HandleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HandleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HandleRequest* internal_default_instance() {
    return reinterpret_cast<const HandleRequest*>(
               &_HandleRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(HandleRequest* other);
  friend void swap(HandleRequest& a, HandleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HandleRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  HandleRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HandleRequest& from);
  void MergeFrom(const HandleRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HandleRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .thalhammer.http.Request request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  const ::thalhammer::http::Request& request() const;
  ::thalhammer::http::Request* release_request();
  ::thalhammer::http::Request* mutable_request();
  void set_allocated_request(::thalhammer::http::Request* request);

  // .thalhammer.http.ClientInfo client = 2;
  bool has_client() const;
  void clear_client();
  static const int kClientFieldNumber = 2;
  const ::thalhammer::http::ClientInfo& client() const;
  ::thalhammer::http::ClientInfo* release_client();
  ::thalhammer::http::ClientInfo* mutable_client();
  void set_allocated_client(::thalhammer::http::ClientInfo* client);

  // @@protoc_insertion_point(class_scope:thalhammer.http.HandleRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::thalhammer::http::Request* request_;
  ::thalhammer::http::ClientInfo* client_;
  mutable int _cached_size_;
  friend struct ::protobuf_handler_2eproto::TableStruct;
  friend void ::protobuf_handler_2eproto::InitDefaultsHandleRequestImpl();
};
// -------------------------------------------------------------------

class HandleResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:thalhammer.http.HandleResponse) */ {
 public:
  HandleResponse();
  virtual ~HandleResponse();

  HandleResponse(const HandleResponse& from);

  inline HandleResponse& operator=(const HandleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HandleResponse(HandleResponse&& from) noexcept
    : HandleResponse() {
    *this = ::std::move(from);
  }

  inline HandleResponse& operator=(HandleResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HandleResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HandleResponse* internal_default_instance() {
    return reinterpret_cast<const HandleResponse*>(
               &_HandleResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(HandleResponse* other);
  friend void swap(HandleResponse& a, HandleResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HandleResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  HandleResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HandleResponse& from);
  void MergeFrom(const HandleResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HandleResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .thalhammer.http.Response response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  const ::thalhammer::http::Response& response() const;
  ::thalhammer::http::Response* release_response();
  ::thalhammer::http::Response* mutable_response();
  void set_allocated_response(::thalhammer::http::Response* response);

  // @@protoc_insertion_point(class_scope:thalhammer.http.HandleResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::thalhammer::http::Response* response_;
  mutable int _cached_size_;
  friend struct ::protobuf_handler_2eproto::TableStruct;
  friend void ::protobuf_handler_2eproto::InitDefaultsHandleResponseImpl();
};
// -------------------------------------------------------------------

class WebSocketMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:thalhammer.http.WebSocketMessage) */ {
 public:
  WebSocketMessage();
  virtual ~WebSocketMessage();

  WebSocketMessage(const WebSocketMessage& from);

  inline WebSocketMessage& operator=(const WebSocketMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WebSocketMessage(WebSocketMessage&& from) noexcept
    : WebSocketMessage() {
    *this = ::std::move(from);
  }

  inline WebSocketMessage& operator=(WebSocketMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WebSocketMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WebSocketMessage* internal_default_instance() {
    return reinterpret_cast<const WebSocketMessage*>(
               &_WebSocketMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(WebSocketMessage* other);
  friend void swap(WebSocketMessage& a, WebSocketMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WebSocketMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  WebSocketMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WebSocketMessage& from);
  void MergeFrom(const WebSocketMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WebSocketMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef WebSocketMessage_Type Type;
  static const Type TEXT =
    WebSocketMessage_Type_TEXT;
  static const Type BINARY =
    WebSocketMessage_Type_BINARY;
  static const Type CLOSE =
    WebSocketMessage_Type_CLOSE;
  static inline bool Type_IsValid(int value) {
    return WebSocketMessage_Type_IsValid(value);
  }
  static const Type Type_MIN =
    WebSocketMessage_Type_Type_MIN;
  static const Type Type_MAX =
    WebSocketMessage_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    WebSocketMessage_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return WebSocketMessage_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return WebSocketMessage_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return WebSocketMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .thalhammer.http.WebSocketMessage.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::thalhammer::http::WebSocketMessage_Type type() const;
  void set_type(::thalhammer::http::WebSocketMessage_Type value);

  // @@protoc_insertion_point(class_scope:thalhammer.http.WebSocketMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_handler_2eproto::TableStruct;
  friend void ::protobuf_handler_2eproto::InitDefaultsWebSocketMessageImpl();
};
// -------------------------------------------------------------------

class WebSocketRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:thalhammer.http.WebSocketRequest) */ {
 public:
  WebSocketRequest();
  virtual ~WebSocketRequest();

  WebSocketRequest(const WebSocketRequest& from);

  inline WebSocketRequest& operator=(const WebSocketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WebSocketRequest(WebSocketRequest&& from) noexcept
    : WebSocketRequest() {
    *this = ::std::move(from);
  }

  inline WebSocketRequest& operator=(WebSocketRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WebSocketRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WebSocketRequest* internal_default_instance() {
    return reinterpret_cast<const WebSocketRequest*>(
               &_WebSocketRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(WebSocketRequest* other);
  friend void swap(WebSocketRequest& a, WebSocketRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WebSocketRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  WebSocketRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WebSocketRequest& from);
  void MergeFrom(const WebSocketRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WebSocketRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .thalhammer.http.Header headers = 4;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 4;
  const ::thalhammer::http::Header& headers(int index) const;
  ::thalhammer::http::Header* mutable_headers(int index);
  ::thalhammer::http::Header* add_headers();
  ::google::protobuf::RepeatedPtrField< ::thalhammer::http::Header >*
      mutable_headers();
  const ::google::protobuf::RepeatedPtrField< ::thalhammer::http::Header >&
      headers() const;

  // string method = 1;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // string resource = 2;
  void clear_resource();
  static const int kResourceFieldNumber = 2;
  const ::std::string& resource() const;
  void set_resource(const ::std::string& value);
  #if LANG_CXX11
  void set_resource(::std::string&& value);
  #endif
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  ::std::string* mutable_resource();
  ::std::string* release_resource();
  void set_allocated_resource(::std::string* resource);

  // string protocol = 3;
  void clear_protocol();
  static const int kProtocolFieldNumber = 3;
  const ::std::string& protocol() const;
  void set_protocol(const ::std::string& value);
  #if LANG_CXX11
  void set_protocol(::std::string&& value);
  #endif
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  ::std::string* mutable_protocol();
  ::std::string* release_protocol();
  void set_allocated_protocol(::std::string* protocol);

  // .thalhammer.http.ClientInfo client = 5;
  bool has_client() const;
  void clear_client();
  static const int kClientFieldNumber = 5;
  const ::thalhammer::http::ClientInfo& client() const;
  ::thalhammer::http::ClientInfo* release_client();
  ::thalhammer::http::ClientInfo* mutable_client();
  void set_allocated_client(::thalhammer::http::ClientInfo* client);

  // @@protoc_insertion_point(class_scope:thalhammer.http.WebSocketRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::thalhammer::http::Header > headers_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr resource_;
  ::google::protobuf::internal::ArenaStringPtr protocol_;
  ::thalhammer::http::ClientInfo* client_;
  mutable int _cached_size_;
  friend struct ::protobuf_handler_2eproto::TableStruct;
  friend void ::protobuf_handler_2eproto::InitDefaultsWebSocketRequestImpl();
};
// -------------------------------------------------------------------

class WebSocketResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:thalhammer.http.WebSocketResponse) */ {
 public:
  WebSocketResponse();
  virtual ~WebSocketResponse();

  WebSocketResponse(const WebSocketResponse& from);

  inline WebSocketResponse& operator=(const WebSocketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WebSocketResponse(WebSocketResponse&& from) noexcept
    : WebSocketResponse() {
    *this = ::std::move(from);
  }

  inline WebSocketResponse& operator=(WebSocketResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WebSocketResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WebSocketResponse* internal_default_instance() {
    return reinterpret_cast<const WebSocketResponse*>(
               &_WebSocketResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(WebSocketResponse* other);
  friend void swap(WebSocketResponse& a, WebSocketResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WebSocketResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  WebSocketResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WebSocketResponse& from);
  void MergeFrom(const WebSocketResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WebSocketResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .thalhammer.http.Header headers = 3;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 3;
  const ::thalhammer::http::Header& headers(int index) const;
  ::thalhammer::http::Header* mutable_headers(int index);
  ::thalhammer::http::Header* add_headers();
  ::google::protobuf::RepeatedPtrField< ::thalhammer::http::Header >*
      mutable_headers();
  const ::google::protobuf::RepeatedPtrField< ::thalhammer::http::Header >&
      headers() const;

  // @@protoc_insertion_point(class_scope:thalhammer.http.WebSocketResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::thalhammer::http::Header > headers_;
  mutable int _cached_size_;
  friend struct ::protobuf_handler_2eproto::TableStruct;
  friend void ::protobuf_handler_2eproto::InitDefaultsWebSocketResponseImpl();
};
// -------------------------------------------------------------------

class HandleWebSocketRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:thalhammer.http.HandleWebSocketRequest) */ {
 public:
  HandleWebSocketRequest();
  virtual ~HandleWebSocketRequest();

  HandleWebSocketRequest(const HandleWebSocketRequest& from);

  inline HandleWebSocketRequest& operator=(const HandleWebSocketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HandleWebSocketRequest(HandleWebSocketRequest&& from) noexcept
    : HandleWebSocketRequest() {
    *this = ::std::move(from);
  }

  inline HandleWebSocketRequest& operator=(HandleWebSocketRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HandleWebSocketRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HandleWebSocketRequest* internal_default_instance() {
    return reinterpret_cast<const HandleWebSocketRequest*>(
               &_HandleWebSocketRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(HandleWebSocketRequest* other);
  friend void swap(HandleWebSocketRequest& a, HandleWebSocketRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HandleWebSocketRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  HandleWebSocketRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HandleWebSocketRequest& from);
  void MergeFrom(const HandleWebSocketRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HandleWebSocketRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .thalhammer.http.WebSocketRequest request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  const ::thalhammer::http::WebSocketRequest& request() const;
  ::thalhammer::http::WebSocketRequest* release_request();
  ::thalhammer::http::WebSocketRequest* mutable_request();
  void set_allocated_request(::thalhammer::http::WebSocketRequest* request);

  // .thalhammer.http.WebSocketMessage message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::thalhammer::http::WebSocketMessage& message() const;
  ::thalhammer::http::WebSocketMessage* release_message();
  ::thalhammer::http::WebSocketMessage* mutable_message();
  void set_allocated_message(::thalhammer::http::WebSocketMessage* message);

  // @@protoc_insertion_point(class_scope:thalhammer.http.HandleWebSocketRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::thalhammer::http::WebSocketRequest* request_;
  ::thalhammer::http::WebSocketMessage* message_;
  mutable int _cached_size_;
  friend struct ::protobuf_handler_2eproto::TableStruct;
  friend void ::protobuf_handler_2eproto::InitDefaultsHandleWebSocketRequestImpl();
};
// -------------------------------------------------------------------

class HandleWebSocketResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:thalhammer.http.HandleWebSocketResponse) */ {
 public:
  HandleWebSocketResponse();
  virtual ~HandleWebSocketResponse();

  HandleWebSocketResponse(const HandleWebSocketResponse& from);

  inline HandleWebSocketResponse& operator=(const HandleWebSocketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HandleWebSocketResponse(HandleWebSocketResponse&& from) noexcept
    : HandleWebSocketResponse() {
    *this = ::std::move(from);
  }

  inline HandleWebSocketResponse& operator=(HandleWebSocketResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HandleWebSocketResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HandleWebSocketResponse* internal_default_instance() {
    return reinterpret_cast<const HandleWebSocketResponse*>(
               &_HandleWebSocketResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(HandleWebSocketResponse* other);
  friend void swap(HandleWebSocketResponse& a, HandleWebSocketResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HandleWebSocketResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  HandleWebSocketResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HandleWebSocketResponse& from);
  void MergeFrom(const HandleWebSocketResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HandleWebSocketResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .thalhammer.http.WebSocketResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  const ::thalhammer::http::WebSocketResponse& response() const;
  ::thalhammer::http::WebSocketResponse* release_response();
  ::thalhammer::http::WebSocketResponse* mutable_response();
  void set_allocated_response(::thalhammer::http::WebSocketResponse* response);

  // .thalhammer.http.WebSocketMessage message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::thalhammer::http::WebSocketMessage& message() const;
  ::thalhammer::http::WebSocketMessage* release_message();
  ::thalhammer::http::WebSocketMessage* mutable_message();
  void set_allocated_message(::thalhammer::http::WebSocketMessage* message);

  // @@protoc_insertion_point(class_scope:thalhammer.http.HandleWebSocketResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::thalhammer::http::WebSocketResponse* response_;
  ::thalhammer::http::WebSocketMessage* message_;
  mutable int _cached_size_;
  friend struct ::protobuf_handler_2eproto::TableStruct;
  friend void ::protobuf_handler_2eproto::InitDefaultsHandleWebSocketResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// string key = 1;
inline void Header::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::key() const {
  // @@protoc_insertion_point(field_get:thalhammer.http.Header.key)
  return key_.GetNoArena();
}
inline void Header::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:thalhammer.http.Header.key)
}
#if LANG_CXX11
inline void Header::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:thalhammer.http.Header.key)
}
#endif
inline void Header::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:thalhammer.http.Header.key)
}
inline void Header::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:thalhammer.http.Header.key)
}
inline ::std::string* Header::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:thalhammer.http.Header.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_key() {
  // @@protoc_insertion_point(field_release:thalhammer.http.Header.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.Header.key)
}

// string value = 2;
inline void Header::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::value() const {
  // @@protoc_insertion_point(field_get:thalhammer.http.Header.value)
  return value_.GetNoArena();
}
inline void Header::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:thalhammer.http.Header.value)
}
#if LANG_CXX11
inline void Header::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:thalhammer.http.Header.value)
}
#endif
inline void Header::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:thalhammer.http.Header.value)
}
inline void Header::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:thalhammer.http.Header.value)
}
inline ::std::string* Header::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:thalhammer.http.Header.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_value() {
  // @@protoc_insertion_point(field_release:thalhammer.http.Header.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.Header.value)
}

// -------------------------------------------------------------------

// Request

// string method = 1;
inline void Request::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::method() const {
  // @@protoc_insertion_point(field_get:thalhammer.http.Request.method)
  return method_.GetNoArena();
}
inline void Request::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:thalhammer.http.Request.method)
}
#if LANG_CXX11
inline void Request::set_method(::std::string&& value) {
  
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:thalhammer.http.Request.method)
}
#endif
inline void Request::set_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:thalhammer.http.Request.method)
}
inline void Request::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:thalhammer.http.Request.method)
}
inline ::std::string* Request::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:thalhammer.http.Request.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_method() {
  // @@protoc_insertion_point(field_release:thalhammer.http.Request.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.Request.method)
}

// string resource = 2;
inline void Request::clear_resource() {
  resource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::resource() const {
  // @@protoc_insertion_point(field_get:thalhammer.http.Request.resource)
  return resource_.GetNoArena();
}
inline void Request::set_resource(const ::std::string& value) {
  
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:thalhammer.http.Request.resource)
}
#if LANG_CXX11
inline void Request::set_resource(::std::string&& value) {
  
  resource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:thalhammer.http.Request.resource)
}
#endif
inline void Request::set_resource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:thalhammer.http.Request.resource)
}
inline void Request::set_resource(const char* value, size_t size) {
  
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:thalhammer.http.Request.resource)
}
inline ::std::string* Request::mutable_resource() {
  
  // @@protoc_insertion_point(field_mutable:thalhammer.http.Request.resource)
  return resource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_resource() {
  // @@protoc_insertion_point(field_release:thalhammer.http.Request.resource)
  
  return resource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_resource(::std::string* resource) {
  if (resource != NULL) {
    
  } else {
    
  }
  resource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.Request.resource)
}

// string protocol = 3;
inline void Request::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::protocol() const {
  // @@protoc_insertion_point(field_get:thalhammer.http.Request.protocol)
  return protocol_.GetNoArena();
}
inline void Request::set_protocol(const ::std::string& value) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:thalhammer.http.Request.protocol)
}
#if LANG_CXX11
inline void Request::set_protocol(::std::string&& value) {
  
  protocol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:thalhammer.http.Request.protocol)
}
#endif
inline void Request::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:thalhammer.http.Request.protocol)
}
inline void Request::set_protocol(const char* value, size_t size) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:thalhammer.http.Request.protocol)
}
inline ::std::string* Request::mutable_protocol() {
  
  // @@protoc_insertion_point(field_mutable:thalhammer.http.Request.protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_protocol() {
  // @@protoc_insertion_point(field_release:thalhammer.http.Request.protocol)
  
  return protocol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_protocol(::std::string* protocol) {
  if (protocol != NULL) {
    
  } else {
    
  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.Request.protocol)
}

// repeated .thalhammer.http.Header headers = 4;
inline int Request::headers_size() const {
  return headers_.size();
}
inline void Request::clear_headers() {
  headers_.Clear();
}
inline const ::thalhammer::http::Header& Request::headers(int index) const {
  // @@protoc_insertion_point(field_get:thalhammer.http.Request.headers)
  return headers_.Get(index);
}
inline ::thalhammer::http::Header* Request::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:thalhammer.http.Request.headers)
  return headers_.Mutable(index);
}
inline ::thalhammer::http::Header* Request::add_headers() {
  // @@protoc_insertion_point(field_add:thalhammer.http.Request.headers)
  return headers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::thalhammer::http::Header >*
Request::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:thalhammer.http.Request.headers)
  return &headers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::thalhammer::http::Header >&
Request::headers() const {
  // @@protoc_insertion_point(field_list:thalhammer.http.Request.headers)
  return headers_;
}

// bytes content = 5;
inline void Request::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::content() const {
  // @@protoc_insertion_point(field_get:thalhammer.http.Request.content)
  return content_.GetNoArena();
}
inline void Request::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:thalhammer.http.Request.content)
}
#if LANG_CXX11
inline void Request::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:thalhammer.http.Request.content)
}
#endif
inline void Request::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:thalhammer.http.Request.content)
}
inline void Request::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:thalhammer.http.Request.content)
}
inline ::std::string* Request::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:thalhammer.http.Request.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_content() {
  // @@protoc_insertion_point(field_release:thalhammer.http.Request.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.Request.content)
}

// -------------------------------------------------------------------

// Response

// int32 status_code = 1;
inline void Response::clear_status_code() {
  status_code_ = 0;
}
inline ::google::protobuf::int32 Response::status_code() const {
  // @@protoc_insertion_point(field_get:thalhammer.http.Response.status_code)
  return status_code_;
}
inline void Response::set_status_code(::google::protobuf::int32 value) {
  
  status_code_ = value;
  // @@protoc_insertion_point(field_set:thalhammer.http.Response.status_code)
}

// string status_message = 2;
inline void Response::clear_status_message() {
  status_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::status_message() const {
  // @@protoc_insertion_point(field_get:thalhammer.http.Response.status_message)
  return status_message_.GetNoArena();
}
inline void Response::set_status_message(const ::std::string& value) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:thalhammer.http.Response.status_message)
}
#if LANG_CXX11
inline void Response::set_status_message(::std::string&& value) {
  
  status_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:thalhammer.http.Response.status_message)
}
#endif
inline void Response::set_status_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:thalhammer.http.Response.status_message)
}
inline void Response::set_status_message(const char* value, size_t size) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:thalhammer.http.Response.status_message)
}
inline ::std::string* Response::mutable_status_message() {
  
  // @@protoc_insertion_point(field_mutable:thalhammer.http.Response.status_message)
  return status_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_status_message() {
  // @@protoc_insertion_point(field_release:thalhammer.http.Response.status_message)
  
  return status_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_status_message(::std::string* status_message) {
  if (status_message != NULL) {
    
  } else {
    
  }
  status_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_message);
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.Response.status_message)
}

// repeated .thalhammer.http.Header headers = 3;
inline int Response::headers_size() const {
  return headers_.size();
}
inline void Response::clear_headers() {
  headers_.Clear();
}
inline const ::thalhammer::http::Header& Response::headers(int index) const {
  // @@protoc_insertion_point(field_get:thalhammer.http.Response.headers)
  return headers_.Get(index);
}
inline ::thalhammer::http::Header* Response::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:thalhammer.http.Response.headers)
  return headers_.Mutable(index);
}
inline ::thalhammer::http::Header* Response::add_headers() {
  // @@protoc_insertion_point(field_add:thalhammer.http.Response.headers)
  return headers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::thalhammer::http::Header >*
Response::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:thalhammer.http.Response.headers)
  return &headers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::thalhammer::http::Header >&
Response::headers() const {
  // @@protoc_insertion_point(field_list:thalhammer.http.Response.headers)
  return headers_;
}

// bytes content = 5;
inline void Response::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::content() const {
  // @@protoc_insertion_point(field_get:thalhammer.http.Response.content)
  return content_.GetNoArena();
}
inline void Response::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:thalhammer.http.Response.content)
}
#if LANG_CXX11
inline void Response::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:thalhammer.http.Response.content)
}
#endif
inline void Response::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:thalhammer.http.Response.content)
}
inline void Response::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:thalhammer.http.Response.content)
}
inline ::std::string* Response::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:thalhammer.http.Response.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_content() {
  // @@protoc_insertion_point(field_release:thalhammer.http.Response.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.Response.content)
}

// -------------------------------------------------------------------

// ClientInfo

// string remote_ip = 1;
inline void ClientInfo::clear_remote_ip() {
  remote_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientInfo::remote_ip() const {
  // @@protoc_insertion_point(field_get:thalhammer.http.ClientInfo.remote_ip)
  return remote_ip_.GetNoArena();
}
inline void ClientInfo::set_remote_ip(const ::std::string& value) {
  
  remote_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:thalhammer.http.ClientInfo.remote_ip)
}
#if LANG_CXX11
inline void ClientInfo::set_remote_ip(::std::string&& value) {
  
  remote_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:thalhammer.http.ClientInfo.remote_ip)
}
#endif
inline void ClientInfo::set_remote_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:thalhammer.http.ClientInfo.remote_ip)
}
inline void ClientInfo::set_remote_ip(const char* value, size_t size) {
  
  remote_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:thalhammer.http.ClientInfo.remote_ip)
}
inline ::std::string* ClientInfo::mutable_remote_ip() {
  
  // @@protoc_insertion_point(field_mutable:thalhammer.http.ClientInfo.remote_ip)
  return remote_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientInfo::release_remote_ip() {
  // @@protoc_insertion_point(field_release:thalhammer.http.ClientInfo.remote_ip)
  
  return remote_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientInfo::set_allocated_remote_ip(::std::string* remote_ip) {
  if (remote_ip != NULL) {
    
  } else {
    
  }
  remote_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_ip);
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.ClientInfo.remote_ip)
}

// int32 remote_port = 2;
inline void ClientInfo::clear_remote_port() {
  remote_port_ = 0;
}
inline ::google::protobuf::int32 ClientInfo::remote_port() const {
  // @@protoc_insertion_point(field_get:thalhammer.http.ClientInfo.remote_port)
  return remote_port_;
}
inline void ClientInfo::set_remote_port(::google::protobuf::int32 value) {
  
  remote_port_ = value;
  // @@protoc_insertion_point(field_set:thalhammer.http.ClientInfo.remote_port)
}

// string local_ip = 3;
inline void ClientInfo::clear_local_ip() {
  local_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientInfo::local_ip() const {
  // @@protoc_insertion_point(field_get:thalhammer.http.ClientInfo.local_ip)
  return local_ip_.GetNoArena();
}
inline void ClientInfo::set_local_ip(const ::std::string& value) {
  
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:thalhammer.http.ClientInfo.local_ip)
}
#if LANG_CXX11
inline void ClientInfo::set_local_ip(::std::string&& value) {
  
  local_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:thalhammer.http.ClientInfo.local_ip)
}
#endif
inline void ClientInfo::set_local_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:thalhammer.http.ClientInfo.local_ip)
}
inline void ClientInfo::set_local_ip(const char* value, size_t size) {
  
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:thalhammer.http.ClientInfo.local_ip)
}
inline ::std::string* ClientInfo::mutable_local_ip() {
  
  // @@protoc_insertion_point(field_mutable:thalhammer.http.ClientInfo.local_ip)
  return local_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientInfo::release_local_ip() {
  // @@protoc_insertion_point(field_release:thalhammer.http.ClientInfo.local_ip)
  
  return local_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientInfo::set_allocated_local_ip(::std::string* local_ip) {
  if (local_ip != NULL) {
    
  } else {
    
  }
  local_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_ip);
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.ClientInfo.local_ip)
}

// int32 local_port = 4;
inline void ClientInfo::clear_local_port() {
  local_port_ = 0;
}
inline ::google::protobuf::int32 ClientInfo::local_port() const {
  // @@protoc_insertion_point(field_get:thalhammer.http.ClientInfo.local_port)
  return local_port_;
}
inline void ClientInfo::set_local_port(::google::protobuf::int32 value) {
  
  local_port_ = value;
  // @@protoc_insertion_point(field_set:thalhammer.http.ClientInfo.local_port)
}

// bool encrypted = 5;
inline void ClientInfo::clear_encrypted() {
  encrypted_ = false;
}
inline bool ClientInfo::encrypted() const {
  // @@protoc_insertion_point(field_get:thalhammer.http.ClientInfo.encrypted)
  return encrypted_;
}
inline void ClientInfo::set_encrypted(bool value) {
  
  encrypted_ = value;
  // @@protoc_insertion_point(field_set:thalhammer.http.ClientInfo.encrypted)
}

// -------------------------------------------------------------------

// HandleRequest

// .thalhammer.http.Request request = 1;
inline bool HandleRequest::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
inline void HandleRequest::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) {
    delete request_;
  }
  request_ = NULL;
}
inline const ::thalhammer::http::Request& HandleRequest::request() const {
  const ::thalhammer::http::Request* p = request_;
  // @@protoc_insertion_point(field_get:thalhammer.http.HandleRequest.request)
  return p != NULL ? *p : *reinterpret_cast<const ::thalhammer::http::Request*>(
      &::thalhammer::http::_Request_default_instance_);
}
inline ::thalhammer::http::Request* HandleRequest::release_request() {
  // @@protoc_insertion_point(field_release:thalhammer.http.HandleRequest.request)
  
  ::thalhammer::http::Request* temp = request_;
  request_ = NULL;
  return temp;
}
inline ::thalhammer::http::Request* HandleRequest::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::thalhammer::http::Request;
  }
  // @@protoc_insertion_point(field_mutable:thalhammer.http.HandleRequest.request)
  return request_;
}
inline void HandleRequest::set_allocated_request(::thalhammer::http::Request* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete request_;
  }
  if (request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.HandleRequest.request)
}

// .thalhammer.http.ClientInfo client = 2;
inline bool HandleRequest::has_client() const {
  return this != internal_default_instance() && client_ != NULL;
}
inline void HandleRequest::clear_client() {
  if (GetArenaNoVirtual() == NULL && client_ != NULL) {
    delete client_;
  }
  client_ = NULL;
}
inline const ::thalhammer::http::ClientInfo& HandleRequest::client() const {
  const ::thalhammer::http::ClientInfo* p = client_;
  // @@protoc_insertion_point(field_get:thalhammer.http.HandleRequest.client)
  return p != NULL ? *p : *reinterpret_cast<const ::thalhammer::http::ClientInfo*>(
      &::thalhammer::http::_ClientInfo_default_instance_);
}
inline ::thalhammer::http::ClientInfo* HandleRequest::release_client() {
  // @@protoc_insertion_point(field_release:thalhammer.http.HandleRequest.client)
  
  ::thalhammer::http::ClientInfo* temp = client_;
  client_ = NULL;
  return temp;
}
inline ::thalhammer::http::ClientInfo* HandleRequest::mutable_client() {
  
  if (client_ == NULL) {
    client_ = new ::thalhammer::http::ClientInfo;
  }
  // @@protoc_insertion_point(field_mutable:thalhammer.http.HandleRequest.client)
  return client_;
}
inline void HandleRequest::set_allocated_client(::thalhammer::http::ClientInfo* client) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete client_;
  }
  if (client) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.HandleRequest.client)
}

// -------------------------------------------------------------------

// HandleResponse

// .thalhammer.http.Response response = 1;
inline bool HandleResponse::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void HandleResponse::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}
inline const ::thalhammer::http::Response& HandleResponse::response() const {
  const ::thalhammer::http::Response* p = response_;
  // @@protoc_insertion_point(field_get:thalhammer.http.HandleResponse.response)
  return p != NULL ? *p : *reinterpret_cast<const ::thalhammer::http::Response*>(
      &::thalhammer::http::_Response_default_instance_);
}
inline ::thalhammer::http::Response* HandleResponse::release_response() {
  // @@protoc_insertion_point(field_release:thalhammer.http.HandleResponse.response)
  
  ::thalhammer::http::Response* temp = response_;
  response_ = NULL;
  return temp;
}
inline ::thalhammer::http::Response* HandleResponse::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::thalhammer::http::Response;
  }
  // @@protoc_insertion_point(field_mutable:thalhammer.http.HandleResponse.response)
  return response_;
}
inline void HandleResponse::set_allocated_response(::thalhammer::http::Response* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.HandleResponse.response)
}

// -------------------------------------------------------------------

// WebSocketMessage

// .thalhammer.http.WebSocketMessage.Type type = 1;
inline void WebSocketMessage::clear_type() {
  type_ = 0;
}
inline ::thalhammer::http::WebSocketMessage_Type WebSocketMessage::type() const {
  // @@protoc_insertion_point(field_get:thalhammer.http.WebSocketMessage.type)
  return static_cast< ::thalhammer::http::WebSocketMessage_Type >(type_);
}
inline void WebSocketMessage::set_type(::thalhammer::http::WebSocketMessage_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:thalhammer.http.WebSocketMessage.type)
}

// bytes content = 2;
inline void WebSocketMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WebSocketMessage::content() const {
  // @@protoc_insertion_point(field_get:thalhammer.http.WebSocketMessage.content)
  return content_.GetNoArena();
}
inline void WebSocketMessage::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:thalhammer.http.WebSocketMessage.content)
}
#if LANG_CXX11
inline void WebSocketMessage::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:thalhammer.http.WebSocketMessage.content)
}
#endif
inline void WebSocketMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:thalhammer.http.WebSocketMessage.content)
}
inline void WebSocketMessage::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:thalhammer.http.WebSocketMessage.content)
}
inline ::std::string* WebSocketMessage::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:thalhammer.http.WebSocketMessage.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WebSocketMessage::release_content() {
  // @@protoc_insertion_point(field_release:thalhammer.http.WebSocketMessage.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WebSocketMessage::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.WebSocketMessage.content)
}

// -------------------------------------------------------------------

// WebSocketRequest

// string method = 1;
inline void WebSocketRequest::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WebSocketRequest::method() const {
  // @@protoc_insertion_point(field_get:thalhammer.http.WebSocketRequest.method)
  return method_.GetNoArena();
}
inline void WebSocketRequest::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:thalhammer.http.WebSocketRequest.method)
}
#if LANG_CXX11
inline void WebSocketRequest::set_method(::std::string&& value) {
  
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:thalhammer.http.WebSocketRequest.method)
}
#endif
inline void WebSocketRequest::set_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:thalhammer.http.WebSocketRequest.method)
}
inline void WebSocketRequest::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:thalhammer.http.WebSocketRequest.method)
}
inline ::std::string* WebSocketRequest::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:thalhammer.http.WebSocketRequest.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WebSocketRequest::release_method() {
  // @@protoc_insertion_point(field_release:thalhammer.http.WebSocketRequest.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WebSocketRequest::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.WebSocketRequest.method)
}

// string resource = 2;
inline void WebSocketRequest::clear_resource() {
  resource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WebSocketRequest::resource() const {
  // @@protoc_insertion_point(field_get:thalhammer.http.WebSocketRequest.resource)
  return resource_.GetNoArena();
}
inline void WebSocketRequest::set_resource(const ::std::string& value) {
  
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:thalhammer.http.WebSocketRequest.resource)
}
#if LANG_CXX11
inline void WebSocketRequest::set_resource(::std::string&& value) {
  
  resource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:thalhammer.http.WebSocketRequest.resource)
}
#endif
inline void WebSocketRequest::set_resource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:thalhammer.http.WebSocketRequest.resource)
}
inline void WebSocketRequest::set_resource(const char* value, size_t size) {
  
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:thalhammer.http.WebSocketRequest.resource)
}
inline ::std::string* WebSocketRequest::mutable_resource() {
  
  // @@protoc_insertion_point(field_mutable:thalhammer.http.WebSocketRequest.resource)
  return resource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WebSocketRequest::release_resource() {
  // @@protoc_insertion_point(field_release:thalhammer.http.WebSocketRequest.resource)
  
  return resource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WebSocketRequest::set_allocated_resource(::std::string* resource) {
  if (resource != NULL) {
    
  } else {
    
  }
  resource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.WebSocketRequest.resource)
}

// string protocol = 3;
inline void WebSocketRequest::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WebSocketRequest::protocol() const {
  // @@protoc_insertion_point(field_get:thalhammer.http.WebSocketRequest.protocol)
  return protocol_.GetNoArena();
}
inline void WebSocketRequest::set_protocol(const ::std::string& value) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:thalhammer.http.WebSocketRequest.protocol)
}
#if LANG_CXX11
inline void WebSocketRequest::set_protocol(::std::string&& value) {
  
  protocol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:thalhammer.http.WebSocketRequest.protocol)
}
#endif
inline void WebSocketRequest::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:thalhammer.http.WebSocketRequest.protocol)
}
inline void WebSocketRequest::set_protocol(const char* value, size_t size) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:thalhammer.http.WebSocketRequest.protocol)
}
inline ::std::string* WebSocketRequest::mutable_protocol() {
  
  // @@protoc_insertion_point(field_mutable:thalhammer.http.WebSocketRequest.protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WebSocketRequest::release_protocol() {
  // @@protoc_insertion_point(field_release:thalhammer.http.WebSocketRequest.protocol)
  
  return protocol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WebSocketRequest::set_allocated_protocol(::std::string* protocol) {
  if (protocol != NULL) {
    
  } else {
    
  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.WebSocketRequest.protocol)
}

// repeated .thalhammer.http.Header headers = 4;
inline int WebSocketRequest::headers_size() const {
  return headers_.size();
}
inline void WebSocketRequest::clear_headers() {
  headers_.Clear();
}
inline const ::thalhammer::http::Header& WebSocketRequest::headers(int index) const {
  // @@protoc_insertion_point(field_get:thalhammer.http.WebSocketRequest.headers)
  return headers_.Get(index);
}
inline ::thalhammer::http::Header* WebSocketRequest::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:thalhammer.http.WebSocketRequest.headers)
  return headers_.Mutable(index);
}
inline ::thalhammer::http::Header* WebSocketRequest::add_headers() {
  // @@protoc_insertion_point(field_add:thalhammer.http.WebSocketRequest.headers)
  return headers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::thalhammer::http::Header >*
WebSocketRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:thalhammer.http.WebSocketRequest.headers)
  return &headers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::thalhammer::http::Header >&
WebSocketRequest::headers() const {
  // @@protoc_insertion_point(field_list:thalhammer.http.WebSocketRequest.headers)
  return headers_;
}

// .thalhammer.http.ClientInfo client = 5;
inline bool WebSocketRequest::has_client() const {
  return this != internal_default_instance() && client_ != NULL;
}
inline void WebSocketRequest::clear_client() {
  if (GetArenaNoVirtual() == NULL && client_ != NULL) {
    delete client_;
  }
  client_ = NULL;
}
inline const ::thalhammer::http::ClientInfo& WebSocketRequest::client() const {
  const ::thalhammer::http::ClientInfo* p = client_;
  // @@protoc_insertion_point(field_get:thalhammer.http.WebSocketRequest.client)
  return p != NULL ? *p : *reinterpret_cast<const ::thalhammer::http::ClientInfo*>(
      &::thalhammer::http::_ClientInfo_default_instance_);
}
inline ::thalhammer::http::ClientInfo* WebSocketRequest::release_client() {
  // @@protoc_insertion_point(field_release:thalhammer.http.WebSocketRequest.client)
  
  ::thalhammer::http::ClientInfo* temp = client_;
  client_ = NULL;
  return temp;
}
inline ::thalhammer::http::ClientInfo* WebSocketRequest::mutable_client() {
  
  if (client_ == NULL) {
    client_ = new ::thalhammer::http::ClientInfo;
  }
  // @@protoc_insertion_point(field_mutable:thalhammer.http.WebSocketRequest.client)
  return client_;
}
inline void WebSocketRequest::set_allocated_client(::thalhammer::http::ClientInfo* client) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete client_;
  }
  if (client) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.WebSocketRequest.client)
}

// -------------------------------------------------------------------

// WebSocketResponse

// repeated .thalhammer.http.Header headers = 3;
inline int WebSocketResponse::headers_size() const {
  return headers_.size();
}
inline void WebSocketResponse::clear_headers() {
  headers_.Clear();
}
inline const ::thalhammer::http::Header& WebSocketResponse::headers(int index) const {
  // @@protoc_insertion_point(field_get:thalhammer.http.WebSocketResponse.headers)
  return headers_.Get(index);
}
inline ::thalhammer::http::Header* WebSocketResponse::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:thalhammer.http.WebSocketResponse.headers)
  return headers_.Mutable(index);
}
inline ::thalhammer::http::Header* WebSocketResponse::add_headers() {
  // @@protoc_insertion_point(field_add:thalhammer.http.WebSocketResponse.headers)
  return headers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::thalhammer::http::Header >*
WebSocketResponse::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:thalhammer.http.WebSocketResponse.headers)
  return &headers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::thalhammer::http::Header >&
WebSocketResponse::headers() const {
  // @@protoc_insertion_point(field_list:thalhammer.http.WebSocketResponse.headers)
  return headers_;
}

// -------------------------------------------------------------------

// HandleWebSocketRequest

// .thalhammer.http.WebSocketRequest request = 1;
inline bool HandleWebSocketRequest::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
inline void HandleWebSocketRequest::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) {
    delete request_;
  }
  request_ = NULL;
}
inline const ::thalhammer::http::WebSocketRequest& HandleWebSocketRequest::request() const {
  const ::thalhammer::http::WebSocketRequest* p = request_;
  // @@protoc_insertion_point(field_get:thalhammer.http.HandleWebSocketRequest.request)
  return p != NULL ? *p : *reinterpret_cast<const ::thalhammer::http::WebSocketRequest*>(
      &::thalhammer::http::_WebSocketRequest_default_instance_);
}
inline ::thalhammer::http::WebSocketRequest* HandleWebSocketRequest::release_request() {
  // @@protoc_insertion_point(field_release:thalhammer.http.HandleWebSocketRequest.request)
  
  ::thalhammer::http::WebSocketRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline ::thalhammer::http::WebSocketRequest* HandleWebSocketRequest::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::thalhammer::http::WebSocketRequest;
  }
  // @@protoc_insertion_point(field_mutable:thalhammer.http.HandleWebSocketRequest.request)
  return request_;
}
inline void HandleWebSocketRequest::set_allocated_request(::thalhammer::http::WebSocketRequest* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete request_;
  }
  if (request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.HandleWebSocketRequest.request)
}

// .thalhammer.http.WebSocketMessage message = 2;
inline bool HandleWebSocketRequest::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline void HandleWebSocketRequest::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) {
    delete message_;
  }
  message_ = NULL;
}
inline const ::thalhammer::http::WebSocketMessage& HandleWebSocketRequest::message() const {
  const ::thalhammer::http::WebSocketMessage* p = message_;
  // @@protoc_insertion_point(field_get:thalhammer.http.HandleWebSocketRequest.message)
  return p != NULL ? *p : *reinterpret_cast<const ::thalhammer::http::WebSocketMessage*>(
      &::thalhammer::http::_WebSocketMessage_default_instance_);
}
inline ::thalhammer::http::WebSocketMessage* HandleWebSocketRequest::release_message() {
  // @@protoc_insertion_point(field_release:thalhammer.http.HandleWebSocketRequest.message)
  
  ::thalhammer::http::WebSocketMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::thalhammer::http::WebSocketMessage* HandleWebSocketRequest::mutable_message() {
  
  if (message_ == NULL) {
    message_ = new ::thalhammer::http::WebSocketMessage;
  }
  // @@protoc_insertion_point(field_mutable:thalhammer.http.HandleWebSocketRequest.message)
  return message_;
}
inline void HandleWebSocketRequest::set_allocated_message(::thalhammer::http::WebSocketMessage* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete message_;
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.HandleWebSocketRequest.message)
}

// -------------------------------------------------------------------

// HandleWebSocketResponse

// .thalhammer.http.WebSocketResponse response = 1;
inline bool HandleWebSocketResponse::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void HandleWebSocketResponse::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}
inline const ::thalhammer::http::WebSocketResponse& HandleWebSocketResponse::response() const {
  const ::thalhammer::http::WebSocketResponse* p = response_;
  // @@protoc_insertion_point(field_get:thalhammer.http.HandleWebSocketResponse.response)
  return p != NULL ? *p : *reinterpret_cast<const ::thalhammer::http::WebSocketResponse*>(
      &::thalhammer::http::_WebSocketResponse_default_instance_);
}
inline ::thalhammer::http::WebSocketResponse* HandleWebSocketResponse::release_response() {
  // @@protoc_insertion_point(field_release:thalhammer.http.HandleWebSocketResponse.response)
  
  ::thalhammer::http::WebSocketResponse* temp = response_;
  response_ = NULL;
  return temp;
}
inline ::thalhammer::http::WebSocketResponse* HandleWebSocketResponse::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::thalhammer::http::WebSocketResponse;
  }
  // @@protoc_insertion_point(field_mutable:thalhammer.http.HandleWebSocketResponse.response)
  return response_;
}
inline void HandleWebSocketResponse::set_allocated_response(::thalhammer::http::WebSocketResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.HandleWebSocketResponse.response)
}

// .thalhammer.http.WebSocketMessage message = 2;
inline bool HandleWebSocketResponse::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline void HandleWebSocketResponse::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) {
    delete message_;
  }
  message_ = NULL;
}
inline const ::thalhammer::http::WebSocketMessage& HandleWebSocketResponse::message() const {
  const ::thalhammer::http::WebSocketMessage* p = message_;
  // @@protoc_insertion_point(field_get:thalhammer.http.HandleWebSocketResponse.message)
  return p != NULL ? *p : *reinterpret_cast<const ::thalhammer::http::WebSocketMessage*>(
      &::thalhammer::http::_WebSocketMessage_default_instance_);
}
inline ::thalhammer::http::WebSocketMessage* HandleWebSocketResponse::release_message() {
  // @@protoc_insertion_point(field_release:thalhammer.http.HandleWebSocketResponse.message)
  
  ::thalhammer::http::WebSocketMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::thalhammer::http::WebSocketMessage* HandleWebSocketResponse::mutable_message() {
  
  if (message_ == NULL) {
    message_ = new ::thalhammer::http::WebSocketMessage;
  }
  // @@protoc_insertion_point(field_mutable:thalhammer.http.HandleWebSocketResponse.message)
  return message_;
}
inline void HandleWebSocketResponse::set_allocated_message(::thalhammer::http::WebSocketMessage* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete message_;
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:thalhammer.http.HandleWebSocketResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace http
}  // namespace thalhammer

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::thalhammer::http::WebSocketMessage_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::thalhammer::http::WebSocketMessage_Type>() {
  return ::thalhammer::http::WebSocketMessage_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_handler_2eproto__INCLUDED
