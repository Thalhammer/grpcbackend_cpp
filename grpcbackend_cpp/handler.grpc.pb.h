// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: handler.proto
#ifndef GRPC_handler_2eproto__INCLUDED
#define GRPC_handler_2eproto__INCLUDED

#include "handler.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace thalhammer {
namespace http {

class Handler final {
 public:
  static constexpr char const* service_full_name() {
    return "thalhammer.http.Handler";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::thalhammer::http::HandleRequest, ::thalhammer::http::HandleResponse>> Handle(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::thalhammer::http::HandleRequest, ::thalhammer::http::HandleResponse>>(HandleRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::thalhammer::http::HandleRequest, ::thalhammer::http::HandleResponse>> AsyncHandle(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::thalhammer::http::HandleRequest, ::thalhammer::http::HandleResponse>>(AsyncHandleRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::thalhammer::http::HandleWebSocketRequest, ::thalhammer::http::HandleWebSocketResponse>> HandleWebSocket(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::thalhammer::http::HandleWebSocketRequest, ::thalhammer::http::HandleWebSocketResponse>>(HandleWebSocketRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::thalhammer::http::HandleWebSocketRequest, ::thalhammer::http::HandleWebSocketResponse>> AsyncHandleWebSocket(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::thalhammer::http::HandleWebSocketRequest, ::thalhammer::http::HandleWebSocketResponse>>(AsyncHandleWebSocketRaw(context, cq, tag));
    }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::thalhammer::http::HandleRequest, ::thalhammer::http::HandleResponse>* HandleRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::thalhammer::http::HandleRequest, ::thalhammer::http::HandleResponse>* AsyncHandleRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::thalhammer::http::HandleWebSocketRequest, ::thalhammer::http::HandleWebSocketResponse>* HandleWebSocketRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::thalhammer::http::HandleWebSocketRequest, ::thalhammer::http::HandleWebSocketResponse>* AsyncHandleWebSocketRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::thalhammer::http::HandleRequest, ::thalhammer::http::HandleResponse>> Handle(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::thalhammer::http::HandleRequest, ::thalhammer::http::HandleResponse>>(HandleRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::thalhammer::http::HandleRequest, ::thalhammer::http::HandleResponse>> AsyncHandle(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::thalhammer::http::HandleRequest, ::thalhammer::http::HandleResponse>>(AsyncHandleRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::thalhammer::http::HandleWebSocketRequest, ::thalhammer::http::HandleWebSocketResponse>> HandleWebSocket(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::thalhammer::http::HandleWebSocketRequest, ::thalhammer::http::HandleWebSocketResponse>>(HandleWebSocketRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::thalhammer::http::HandleWebSocketRequest, ::thalhammer::http::HandleWebSocketResponse>> AsyncHandleWebSocket(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::thalhammer::http::HandleWebSocketRequest, ::thalhammer::http::HandleWebSocketResponse>>(AsyncHandleWebSocketRaw(context, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReaderWriter< ::thalhammer::http::HandleRequest, ::thalhammer::http::HandleResponse>* HandleRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::thalhammer::http::HandleRequest, ::thalhammer::http::HandleResponse>* AsyncHandleRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientReaderWriter< ::thalhammer::http::HandleWebSocketRequest, ::thalhammer::http::HandleWebSocketResponse>* HandleWebSocketRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::thalhammer::http::HandleWebSocketRequest, ::thalhammer::http::HandleWebSocketResponse>* AsyncHandleWebSocketRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    const ::grpc::RpcMethod rpcmethod_Handle_;
    const ::grpc::RpcMethod rpcmethod_HandleWebSocket_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Handle(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::thalhammer::http::HandleResponse, ::thalhammer::http::HandleRequest>* stream);
    virtual ::grpc::Status HandleWebSocket(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::thalhammer::http::HandleWebSocketResponse, ::thalhammer::http::HandleWebSocketRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Handle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Handle() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Handle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handle(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::thalhammer::http::HandleResponse, ::thalhammer::http::HandleRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandle(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::thalhammer::http::HandleResponse, ::thalhammer::http::HandleRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleWebSocket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_HandleWebSocket() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_HandleWebSocket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleWebSocket(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::thalhammer::http::HandleWebSocketResponse, ::thalhammer::http::HandleWebSocketRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleWebSocket(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::thalhammer::http::HandleWebSocketResponse, ::thalhammer::http::HandleWebSocketRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Handle<WithAsyncMethod_HandleWebSocket<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Handle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Handle() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Handle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Handle(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::thalhammer::http::HandleResponse, ::thalhammer::http::HandleRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HandleWebSocket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_HandleWebSocket() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_HandleWebSocket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleWebSocket(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::thalhammer::http::HandleWebSocketResponse, ::thalhammer::http::HandleWebSocketRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace http
}  // namespace thalhammer


#endif  // GRPC_handler_2eproto__INCLUDED
